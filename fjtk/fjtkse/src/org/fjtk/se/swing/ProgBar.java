/*
 *  ProgBar.java
 *
 *  Copyright (C) 2007  Francisco Gómez Carrasco
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  Report bugs or new features to: flikxxi@gmail.com
 *
 */
package org.fjtk.se.swing;

import org.fjtk.ce.Gauge;

/**
 * 
 * @author franci
 */
public class ProgBar extends javax.swing.JPanel implements Gauge
{
    int val;
    int max=100;
    double cur,ant;
    long tini=0;
    long tbar=0;
    long ttxt=0;
    long tcur=0;
       
    String text;
    
    /** Creates new customizer BarraProgreso */
    public ProgBar()
    {
        initComponents();
        lb.setVisible(false);
        setVisible(false);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the FormEditor.
     */
    private void initComponents()//GEN-BEGIN:initComponents
    {
        lb = new java.awt.Label();
        jPB = new javax.swing.JProgressBar();

        setLayout(null);

        setPreferredSize(new java.awt.Dimension(250, 40));
        addComponentListener(new java.awt.event.ComponentAdapter()
        {
            public void componentResized(java.awt.event.ComponentEvent evt)
            {
                formComponentResized(evt);
            }
        });

        lb.setBackground(javax.swing.UIManager.getDefaults().getColor("winclassic_tab_sel_gradient"));
        lb.setText("0h 0m 0s + 0h 0m 0s = 0h 0m 0s");
        add(lb);
        lb.setBounds(2, 20, 260, 16);

        jPB.setBackground(java.awt.Color.orange);
        jPB.setForeground(new java.awt.Color(0, 51, 153));
        jPB.setBorder(null);
        jPB.setBorderPainted(false);
        jPB.setRequestFocusEnabled(false);
        jPB.setStringPainted(true);
        add(jPB);
        jPB.setBounds(2, 2, 260, 16);

    }//GEN-END:initComponents
    /**
     * 
     * @param s 
     */
    public void begin(String s)
    {
        begin(s,100);
    }
    /**
     * 
     * @param s 
     * @param maxval 
     */
    public synchronized void begin(String s,int maxval)
    {
        val = 0;
        max = maxval;
        
        cur = 0;
        ant = 0;
        
        jPB.setValue(0);
        jPB.setMaximum(maxval);
        jPB.setString("0.0%");

        text = s;
        setVisible(true);        
        lb.setVisible(true);
        lb.setText(text);
        tini = ttxt = tbar = tcur = System.currentTimeMillis();
        paint();
    }
    /**
     * 
     * @param inc 
     */
    public void step(int inc)
    {
        setvalue(val+inc);
    }
    /**
     * 
     * @param value 
     */
    public void setvalue(int value)
    {
        val = value;
        tcur = System.currentTimeMillis();
        cur = Math.round(((val*100.0)/max)*100.00)/100.0;
        
        paint();
    }
    /**
     * 
     */
    public void paint()
    {
        double dif;
        long   tdif;
        String txt;
                
        dif = Math.abs(ant-cur);
        tdif = Math.abs(tcur-tbar);
        
        // si el % varia y pasa 1/10 segundo o llegamos al final
        if( (dif>=0.01) && (tdif>100 || cur>=100) )        
        {
            jPB.setValue(val);
            jPB.setString(Double.toString(cur)+"%");
            ant  = cur;
            tbar = tcur;
            
            // si han pasado mas de 5 segundos desde la ultima vez o llegamos al final
            tdif = Math.abs(tcur-ttxt);
            if( tdif > 5000 || cur>=100)
            {
                long ttcur,ttrest,ttfull;
                ttcur  = tcur-tini;
                ttfull = (long) (ttcur * (100/cur));
                ttrest = ttfull-ttcur;
                txt =   decodetime(ttcur)   + " + " + 
                        decodetime(ttrest)  + " = " +
                        decodetime(ttfull);
                lb.setText(txt+" ( "+text+" )");
                ttxt = tcur;
            }
        }
    }
    /**
     * 
     * @param millis 
     * @return 
     */
    public String decodetime(long millis)
    {
        long d,h,m,s,ms;
        String txt;
        
        // get millis
        ms = millis % 1000;
        millis /= 1000;
        if(ms>500)
            millis++;
        // get seconds
        s = millis%60;
        millis /= 60;
        // get minutes
        m = millis%60;
        millis /= 60;
        // get hours
        h = millis%24;
        millis /= 24;
        // get days
        d = millis;
        
        txt = "";
        
        if(d!=0)
            txt = txt + Long.toString(d)+"d ";
        txt = txt + Long.toString(h)+"h ";
        txt = txt + Long.toString(m)+"m ";
        txt = txt + Long.toString(s)+"s ";
            
        return txt;
    }
    /**
     * 
     */
    public void end()
    {
        setVisible(false);
    }
        
    /**
     * 
     * @param evt 
     */
    private void formComponentResized(java.awt.event.ComponentEvent evt)//GEN-FIRST:event_formComponentResized
    {//GEN-HEADEREND:event_formComponentResized
        // TODO add your handling code here:
        int x,y,b,h;
        
        x = jPB.getX();
        y = jPB.getY();
        b = getWidth()-x*2;
        h = jPB.getHeight();
       
        jPB.setBounds(x,y,b,h);
        lb.setBounds(x,y*2+h,b,h);
    }//GEN-LAST:event_formComponentResized

    /**
     * 
     * @return 
     */
    public String getString()
    {
        return jPB.getString();
    }

    /**
     * 
     * @param s 
     */
    public void setString(String s)
    {
        jPB.setString(s);
    }

    /**
     * 
     * @return 
     */
    public double getPercentComplete()
    {
        return jPB.getPercentComplete();
    }

    /**
     * 
     * @return 
     */
    public int getValue()
    {
        return jPB.getValue();
    }

    /**
     * 
     * @return 
     */
    public int getMinimum()
    {
        return jPB.getMinimum();
    }

    /**
     * 
     * @return 
     */
    public int getMaximum()
    {
        return jPB.getMaximum();
    }

    /**
     * 
     * @param n 
     */
    public void setValue(int n)
    {
        jPB.setValue(n);
    }

    /**
     * 
     * @param n 
     */
    public void setMinimum(int n)
    {
        jPB.setMinimum(n);
    }

    /**
     * 
     * @param n 
     */
    public void setMaximum(int n)
    {
        jPB.setMaximum(n);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar jPB;
    private java.awt.Label lb;
    // End of variables declaration//GEN-END:variables

    public void begin()
    {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void begin(int max)
    {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public double getDone()
    {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public int getVal()
    {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public int getMin()
    {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public int getMax()
    {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void setVal(int n)
    {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void setMin(int n)
    {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void setMax(int n)
    {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void step()
    {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void paint(double done, String msg)
    {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void setPrefix(String prefix)
    {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public String getPrefix()
    {
        throw new UnsupportedOperationException("Not supported yet.");
    }
}
